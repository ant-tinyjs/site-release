(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{554:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"particlecontainer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#particlecontainer","aria-hidden":"true"}},[t._v("#")]),t._v(" ParticleContainer")]),s("blockquote",[s("ul",[s("li",[t._v("插件名：particles")]),s("li",[t._v("npm：tinyjs-plugin-particles")])])]),s("p",[s("code",[t._v("ParticleContainer")]),t._v(" 是一个非常高性能的显示容器，任何在它里面的精灵渲染速度会比 "),s("code",[t._v("Container")]),t._v(" 提升 2~5 倍。")]),s("p",[t._v("创建后的 ParticleContainer 可以就像使用 "),s("code",[t._v("Container")]),t._v(" 一样来使用它。")]),s("p",[t._v("当然，速度获得了提升一定会有一定的妥协，就看你如何选择。\n在 ParticleContainer 里的精灵仅仅有一些基本的属性："),s("code",[t._v("x")]),t._v("、"),s("code",[t._v("y")]),t._v("、"),s("code",[t._v("width")]),t._v("、"),s("code",[t._v("height")]),t._v("、"),s("code",[t._v("scale")]),t._v("、"),s("code",[t._v("pivot")]),t._v("、"),s("code",[t._v("alpha")]),t._v("、"),s("code",[t._v("visible")]),t._v("，就这么多。\n所以，你可能不能使用滤镜或混合模式，只能使用一个纹理（"),s("strong",[t._v("所以如果你想让精灵有不同的表现方式，你不得不更换雪碧图")]),t._v("），当然，你可以在一个场景或项目中同时使用 "),s("code",[t._v("Container")]),t._v(" 和 "),s("code",[t._v("ParticleContainer")]),t._v("，合理搭配来获得速度的提升，在满足基本需要时，这种妥协还是值得一试。")]),s("p",[t._v("那么，为何 ParticleContainer 可以这么快？\n因为，精灵的位置是直接通过 GPU 来计算的。")]),s("p",[t._v("创建一个 ParticleContainer，有两个常用参数：第一个是可以承载的精灵最大个数，第二个是属性配置的对象：")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pContainer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tiny"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("particles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParticleContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("比如：")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pContainer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tiny"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("particles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParticleContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  rotation"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  alpha"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  scale"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  uvs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("Tips")]),s("ul",[s("li",[t._v("第一个参数 size 可以不用传，默认是 "),s("code",[t._v("1500")]),t._v("；")]),s("li",[t._v("第二个参数 options 也可以不传，默认是 "),s("code",[t._v("{scale: false, position: true, rotation: false, uvs: false, alpha: false}")]),t._v("，如果需要变更 "),s("code",[t._v("scale")]),t._v(" 等，就需要传入并设置为 "),s("code",[t._v("true")]),t._v("，如果不需要变更，就保持为 "),s("code",[t._v("false")]),t._v(" 以获得更多的速度提升；")]),s("li",[s("code",[t._v("UVs")]),t._v(" 是一个3D图表展示术语，它指纹理（图片）准备映射到三维表面的x和y的坐标。"),s("code",[t._v("U")]),t._v(" 是 "),s("code",[t._v("x")]),t._v(" 轴， "),s("code",[t._v("V")]),t._v(" 是 "),s("code",[t._v("y")]),t._v(" 轴。WebGL 用 "),s("code",[t._v("x")]),t._v(", "),s("code",[t._v("y")]),t._v(" 和 "),s("code",[t._v("z")]),t._v(" 来进行三维空间定位，所以 "),s("code",[t._v("U")]),t._v(" 和 "),s("code",[t._v("V")]),t._v(" 被选为表示2D图片纹理的 "),s("code",[t._v("x")]),t._v(" 和 "),s("code",[t._v("y")]),t._v("；")]),s("li",[t._v("所以，当在动画的时候需要改变它们纹理颗粒的时候你需要设置 "),s("code",[t._v("uvs")]),t._v(" 为 true。")])])]),s("blockquote",[s("p",[t._v("注意")]),s("ul",[s("li",[s("code",[t._v("ParticleContainer")]),t._v(" 只适合大量单一纹理的精灵高性能渲染，多个不同纹理（图片）不支持")])])]),s("h2",{attrs:{id:"获取-bound"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取-bound","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取 Bound")]),s("p",[t._v("你无法直接通过实例化对象的 "),s("code",[t._v("width")]),t._v("、"),s("code",[t._v("height")]),t._v(" 属性直接获取到 "),s("code",[t._v("ParticleContainer")]),t._v(" 的宽高，这里提供一个快捷的方法 "),s("code",[t._v("getBounds")]),t._v("，它返回的是一个 "),s("code",[t._v("Tiny.Rectangle")]),t._v(" 对象。")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pContainer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tiny"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("particles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParticleContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bound "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pContainer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBounds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => Rectangle {x: 14, y: 25, width: 555, height: 648, type: 1}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意")]),s("p",[t._v("此方法要在所有子元素都渲染出来后才可以获取到准确的值，建议谨慎使用。")])])])}],!1,null,null,null);a.default=n.exports}}]);